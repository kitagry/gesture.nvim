*gesture.nvim.txt*  Mouse gesture plugin for neovim

Author: notomo
License: MIT License (See LICENSE)

==============================================================================
INTRODUCTION                                        *gesture.nvim-introduction*

*gesture.nvim* is a mouse gesture plugin for neovim.

==============================================================================
FUNCTIONS                                              *gesture.nvim-functions*

gesture#draw()                                                 *gesture#draw()*
    Input gesture from the current cursor position.
    If the current gesture match registered nowait gestures,
    the registered action is executed.

    Return type: bool
        Return true if a nowait action is executed

gesture#input_text({text})                               *gesture#input_text()*
    Input gesture from the argument.
    If the current gesture match registered nowait gestures,
    the registered action is executed.

    Arguments:
      {text}: string

    Return type: bool
        Return true if a nowait action is executed

gesture#finish()                                             *gesture#finish()*
    Finish inputting gestures.
    If the current gesture match registered gestures,
    the registered action is executed.

    Return type: bool
        Return true if an action is executed

gesture#cancel()                                             *gesture#cancel()*
    Cancel the current gesture.

gesture#clear()                                               *gesture#clear()*
    Clear registered gesture settings.

gesture#register()                                 *gesture#register()*
gesture#register().left([{attrs}])                 *gesture#register().left()*
gesture#register().right([{attrs}])                *gesture#register().right()*
gesture#register().down([{attrs}])                 *gesture#register().down()*
gesture#register().up([{attrs}])                   *gesture#register().up()*
    Define input direction of the gesture.

    Arguments:
      {attrs}: {
        'max_length': int?
        'min_length': int?
      }

gesture#register().text({value}, [{attrs}])         *gesture#register().text()*
    Define input text of the gesture.

    Arguments:
      {value}: string
      {attrs}: {
        'max_count': int?
        'min_count': int?
      }

gesture#register().map({key}, [{attrs}])         *gesture#register().map()*
gesture#register().noremap({key}, [{attrs}])     *gesture#register().noremap()*
    Define an output mapping of the gesture.

    Arguments:
      {key}: string
      {attrs}: |gesture.nvim-attributes| dictionary

gesture#register().func({f}, [{attrs}])             *gesture#register().func()*
    Define an output function of the gesture.

    Arguments:
      {f}: {(context: Context): any}

        Context = {
          'windows': {
            'id': int, " window id
            'buffer': int, " buffer id
          }[]
          'start': {
            'row': int,
            'column': int,
            'text': string,
          }
        }

      {attrs}: |gesture.nvim-attributes| dictionary

gesture#get_inputs()                                     *gesture#get_inputs()*
    Get current gesture inputs information.

    Input =
      {
        'kind': 'direction',
        'value': 'LEFT' | 'RIGHT' | 'UP' | 'DOWN',
        'length': int,
      } | {
        'kind': 'text',
        'value': string
        'count': int,
      }

    Return type: Input[]

gesture#is_started()                                     *gesture#is_started()*
   Return v:true if the gesture inputting is started. 

gesture#custom#set({name}, {value})                      *gesture#custom#set()*
    Set custom settings.

    Arguments:
      {name}: string (|gesture.nvim-custom| key)
      {value}: any (|gesture.nvim-custom| value)

gesture#custom#clear()                                 *gesture#custom#clear()*
    Restore default custom settings.

==============================================================================
ATTRIBUTES                                            *gesture.nvim-attributes*

'nowait'
    The gesture is executed even if |gesture#finish()| is not called.
    This is similar to |map-<nowait>|.
    Default: v:false

'buffer'
    The gesture is defined as the current buffer local mapping.
    This is similar to |map-<buffer>|.
    Default: v:false

'silent'
    The gesture's action command is executed with |silent|.
    This is similar to |map-<silent>|.
    Default: v:false

==============================================================================
CUSTOM                                                    *gesture.nvim-custom*

cursor_setter                               *gesture.nvim-custom-cursor_setter*
    gesture#draw() uses this command to set the cursor position.
    Default: "normal! \<LeftMouse>"

x_length_threshold                     *gesture.nvim-custom-x_length_threshold*
    The gesture input is recognized if its x-axis length is longer than this
    value.
    Default: 5

y_length_threshold                     *gesture.nvim-custom-y_length_threshold*
    The gesture input is recognized if its y-axis length is longer than this
    value.
    Default: 5

enabled_buffer_fill                   *gesture.nvim-custom-enabled_buffer_fill*
    If this is v:false, gesture#draw() does not modify the buffers.
    NOTE: The workaround for |gesture.nvim-known-issues|
    Default: v:true

enabled_input_view                     *gesture.nvim-custom-enabled_input_view*
    If this is v:true, gesture inputs are shown on floating window.
    Default: v:false

==============================================================================
EXAMPLES                                                *gesture.nvim-examples*
>
        " -- Basic settings ----------------------------------------------

        " Ensure to enable the mouse support.
        set mouse=a

        noremap <silent> <LeftMouse> :<C-u>call gesture#draw()<CR>
        noremap <silent> <LeftDrag> :<C-u>call gesture#draw()<CR>
        noremap <silent> <LeftRelease> :<C-u>call gesture#finish()<CR>

        " If you use the right mouse button,
        " you need to disable the right click. you use the right mouse button.

        noremap <RightMouse> <Nop>
        noremap <silent> <RightDrag> :<C-u>call gesture#draw()<CR>
        noremap <silent> <RightRelease> :<C-u>call gesture#finish()<CR>


        " -- Gesture settings ----------------------------------------------

        call gesture#register().up().down().noremap('G')
        call gesture#register().right().noremap(":\<C-u>tabnext\<CR>")

        nnoremap S :<C-u>AwesomeCommand<CR>
        call gesture#register().down().left().map('S')

        let s:F = {context -> awesome#function(context) }
        call gesture#register().left().func(s:F)

        " <nowait> mapping
        call gesture#register().down().up().noremap('gg', {'nowait':v:true})

        " buffer local mapping
        call gesture#register().down().up().noremap('G', {'buffer':v:true})


        " -- Custom settings ----------------------------------------------

        call gesture#custom#set('x_length_threshold', 16)
        call gesture#custom#set('y_length_threshold', 9)
        call gesture#custom#set('enabled_input_view', v:true)

==============================================================================
KNOWN ISSUES                                        *gesture.nvim-known-issues*

- The mode change in the gesture may modify the buffers unintentionally.
|gesture.nvim-custom-enabled_buffer_fill| is the workaround option.
>
        " NOTICE: You can hardly gesture in a few lines buffer, 
        call gesture#custom#set('enabled_buffer_fill', v:false)


==============================================================================
vim:tw=78:ts=8:sw=2:ft=help:et:norl:fen:fdl=0:
